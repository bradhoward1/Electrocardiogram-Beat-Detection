# test_ecg_analysis.py


import pytest


@pytest.mark.parametrize("result, expected",
                         [("0.003,0.30983", ["0.003", "0.30983"]),
                          ("0.45", ["0.45"]),
                          ("word,0.9", ["word", "0.9"]),
                          ("NaN,0.10", ["NaN", "0.10"])])
def test_string_split(result, expected):
    from ecg_analysis import string_split
    answer = string_split(result)
    assert answer == expected


@pytest.mark.parametrize("result, expected",
                         [(["8", "0.9"], [8, 0.9]),
                          (["word", "0.9"], ["word", 0.9]),
                          (["word"], ["word"]),
                          (["8"], [8])])
def test_str_to_float(result, expected):
    from ecg_analysis import str_to_float
    answer = str_to_float(result)
    assert answer == expected


@pytest.mark.parametrize("result, expected",
                         [(["dope", 9], False),
                          ([9.2, 0.2], True),
                          (["dope"], False)])
def test_float_check(result, expected):
    from ecg_analysis import float_check
    answer = float_check(result)
    assert answer == expected


def test_line_manip_time():
    from ecg_analysis import line_manip
    contents = ["8,2.0\n", "word,3\n", "word\n", "8\n", "2,3\n", "NaN,3\n"]
    expected_time = [8.0, 2.0]
    time, voltage = line_manip(contents)
    assert time == expected_time


def test_line_manip_voltage():
    from ecg_analysis import line_manip
    contents = ["8,2.0\n", "word,3\n", "word\n", "8\n", "2,3\n", "3,NaN\n"]
    expected_voltage = [2.0, 3.0]
    time, voltage = line_manip(contents)
    assert voltage == expected_voltage


@pytest.mark.parametrize("results, expected",
                         [([300.0, 100.0, 200.0, -300.0], True),
                          ([100.0, 400.0, 200.0], False),
                          ([-400.0, 300.0, 200.0, 123.23], False)])
def test_norm_range(results, expected):
    from ecg_analysis import norm_range
    answer = norm_range(results)
    assert answer == expected


def test_duration():
    from ecg_analysis import duration
    time = [0.0, 1.0, 2.0, 3.0, 4.0, 10.0]
    answer = duration(time)
    expected = 10.0
    assert answer == expected


def test_voltage_ex():
    from ecg_analysis import voltage_ex
    voltage = [300.0, -290.0, 100.0, 45.0, -291.0, 0.0]
    answer = voltage_ex(voltage)
    expected = (-291.0, 300.0)
    assert answer == expected


def test_counting_peaks():
    from ecg_analysis import counting_peaks
    voltage = [-0.145, 0.30929848070893795, 0.24402652364240104,
               -0.07730685613902885, -0.5602525139387842, -0.5583676167621484,
               -0.07165217130626704, 0.25219438991082055, 0.3462360937065653,
               -0.11929268268817915, -0.5798215148919097, -0.5157799785229269,
               -0.20193359093327745, 0.2897815010677366, 0.2866659331741999,
               -0.21128030130938363, -0.5376141275532895, -0.6078868473216641,
               -0.13858924092187208, 0.33070825387371683, 0.2454351992931334,
               -0.0808989741628091, -0.5738459154689166, -0.561962413388055,
               -0.050248474612409944, 0.29359702016244626, 0.3426370313159435,
               -0.14289354929035503, -0.6084242972685385, -0.5693847882300977,
               -0.23553981416620495, 0.23117306459365441, 0.22805517192296718,
               -0.264893498865508, -0.6012290112682745, -0.6665043532016764,
               -0.21220948047068738, 0.2520851691620354, 0.19680915793463485,
               -0.13452704854954492, -0.6274771322855233, -0.6405968840895907,
               -0.15388631064237335, 0.16995687867303044, 0.23899333878570414,
               -0.20654090427215235, -0.6670754260996146, -0.6080398022947638,
               -0.2641974802599701, 0.2325113276566543, 0.2343892527961064,
               -0.25356371151398127, -0.5799021481079556, -0.6651819690818186,
               -0.19589168668149032, 0.24839826134668588, 0.2031174372575487,
               -0.12822203960224213, -0.6211771215904062, -0.6343019828573672,
               -0.1525966300655963, 0.1562430170483489, 0.20027407122606955,
               -0.27526568890894815, -0.7258058389361842, -0.6767759544337204,
               -0.40293752031413876, 0.0537653631745989, 0.05563725283880988,
               -0.36732185797244066, -0.5936644539041408, -0.5489506063736151,
               0.05533323356430278, 0.6996166281861582, 0.8893291397700809,
               0.8129851584147695, 0.4900232272847744, 0.5518914060193787,
               0.963589687980841, 1.0424245596470387, 0.7614483583306852,
               -0.02409876806241391, -0.6746463950855595, -0.6756240982902691,
               -0.34179078413509906, 0.19990432718778875, 0.2417683340476522,
               -0.23619877017843582, -0.5675467564896276, -0.6428410866614571,
               -0.17356553495977453, 0.28570946092141636, 0.23041346329007942,
               -0.08593625223525837, -0.5789068766374555, -0.5920475015681528,
               -0.11035813363380712, 0.22847073405115692, 0.2774854348418992,
               -0.16307089972059022, -0.6086278451568927, -0.5446149769854192,
               -0.21578800979108637, 0.275897489298186, 0.2727517738039794,
               -0.21022516286209417, -0.5465797652748835, -0.6218841112853993,
               -0.14761868541428472, 0.3166460746804368, 0.27133973134309486,
               -0.0650169423678544, -0.5479980955934127, -0.5561493591681161,
               -0.07947073966062143, 0.249350901434808, 0.3133546709123495,
               -0.14221270464348332, -0.6027808007140454, -0.5337791927781261,
               -0.1949597932773538, 0.3017142629966453, 0.30355699519342416,
               -0.17943160323435492, -0.5107940409415475, -0.5861102310426571,
               -0.10685675860347073, 0.3473959387604621, 0.2770774234363279,
               -0.044287425608931105, -0.532280932818329, -0.5304446595166897,
               -0.04877861222838735, 0.28503458680099203, 0.3440256023329228,
               -0.11655463614407939, -0.5721357040656802, -0.4981471768645444,
               -0.16933655832167877, 0.3323242358480725, 0.3441535971816422,
               -0.1538484808208052, -0.4702199652827398, -0.5505498160376484,
               -0.08131011283514816, 0.3679287067581274, 0.30259620517868013,
               -0.028778028281495907, -0.5117857024433277, -0.5199637044454024,
               -0.018312040761367956, 0.3054915090567568, 0.37946796059724125,
               -0.06612695003462225, -0.5367227982223552, -0.46774915934614164,
               -0.13894852635976762, 0.3576971995048542, 0.3595113846164398,
               -0.123505977470929, -0.4598877112198649, -0.5302330257103918,
               -0.07600889396077756, 0.3882142465176726, 0.32286595821716707,
               0.01148114052271193, -0.48654249957906676, -0.4947365749768915,
               -0.008101092087313258, 0.3156916108969221, 0.37965170277306354,
               -0.06595967476768723, -0.5265720970503465, -0.47261513939620686,
               -0.13382568671037515, 0.36280317951883323, 0.369600398026759,
               -0.11843403757223779, -0.4548272130256344, -0.5201897790727434,
               -0.5799021481079556, -0.6651819690818186,
               -0.19589168668149032, 0.24839826134668588, 0.2031174372575487,
               -0.12822203960224213, -0.6211771215904062, -0.6343019828573672,
               -0.1525966300655963, 0.1562430170483489, 0.20027407122606955,
               -0.27526568890894815, -0.7258058389361842, -0.6767759544337204,
               -0.40293752031413876, 0.0537653631745989, 0.05563725283880988,
               -0.36732185797244066, -0.5936644539041408, -0.5489506063736151,
               0.05533323356430278, 0.6996166281861582, 0.8893291397700809,
               0.8129851584147695, 0.4900232272847744, 0.5518914060193787,
               0.963589687980841, 1.0424245596470387, 0.7614483583306852,
               -0.02409876806241391, -0.6746463950855595, -0.6756240982902691,
               -0.34179078413509906, 0.19990432718778875, 0.2417683340476522,
               -0.23619877017843582, -0.5675467564896276, -0.6428410866614571,
               -0.17356553495977453, 0.28570946092141636, 0.23041346329007942,
               -0.08593625223525837, -0.5789068766374555, -0.5920475015681528,
               -0.11035813363380712, 0.22847073405115692, 0.2774854348418992,
               -0.16307089972059022, -0.6086278451568927, -0.5446149769854192,
               -0.21578800979108637, 0.275897489298186, 0.2727517738039794,
               -0.21022516286209417, -0.5465797652748835, -0.6218841112853993,
               -0.14761868541428472, 0.3166460746804368, 0.27133973134309486,
               -0.0650169423678544, -0.5479980955934127, -0.5561493591681161,
               -0.07947073966062143, 0.249350901434808, 0.3133546709123495,
               -0.14221270464348332, -0.6027808007140454, -0.5337791927781261,
               -0.1949597932773538, 0.3017142629966453, 0.30355699519342416,
               -0.17943160323435492, -0.5107940409415475, -0.5861102310426571,
               -0.10685675860347073, 0.3473959387604621, 0.2770774234363279,
               -0.044287425608931105, -0.532280932818329, -0.5304446595166897,
               -0.04877861222838735, 0.28503458680099203, 0.3440256023329228,
               -0.11655463614407939, -0.5721357040656802, -0.4981471768645444,
               -0.16933655832167877, 0.3323242358480725, 0.3441535971816422,
               -0.1538484808208052, -0.4702199652827398, -0.5505498160376484,
               -0.08131011283514816, 0.3679287067581274, 0.30259620517868013,
               -0.028778028281495907, -0.5117857024433277, -0.5199637044454024,
               -0.018312040761367956, 0.3054915090567568, 0.37946796059724125,
               -0.06612695003462225, -0.5367227982223552, -0.46774915934614164,
               -0.13894852635976762, 0.3576971995048542, 0.3595113846164398,
               -0.123505977470929, -0.4598877112198649, -0.5302330257103918,
               -0.07600889396077756, 0.3882142465176726, 0.32286595821716707,
               0.01148114052271193, -0.48654249957906676, -0.4947365749768915,
               -0.008101092087313258, 0.3156916108969221, 0.37965170277306354,
               -0.06595967476768723, -0.5265720970503465, -0.47261513939620686,
               -0.13382568671037515, 0.36280317951883323, 0.369600398026759,
               -0.11843403757223779, -0.4548272130256344, -0.5201897790727434]
    answer = counting_peaks(voltage)
    expected = 2
    assert answer == expected


def test_heart_rate():
    from ecg_analysis import heart_rate
    answer = heart_rate(30.0, 40.0)
    expected = 80.0
    assert answer == expected


def test_beats():
    from ecg_analysis import beats
    time = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]
    voltage = [0.0, 100.0, 200.0, 300.0, 200.0, 100.0]
    answer = beats(time, voltage)
    expected = [3.0]
    assert answer == expected
